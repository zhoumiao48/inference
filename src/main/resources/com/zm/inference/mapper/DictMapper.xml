<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zm.inference.mapper.DictMapper">
    <resultMap id="selectIdAndDNameByTypeIdResult" type="com.zm.inference.common.util.domain.IdAndName">
        <result column="id" property="id"/>
        <result column="d_name" property="name"/>
    </resultMap>
    <resultMap id="BaseResultMap" type="com.zm.inference.domain.Dict">
        <!--@mbg.generated-->
        <!--@Table dict-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="d_name" jdbcType="VARCHAR" property="dName"/>
        <result column="type_id" jdbcType="INTEGER" property="typeId"/>
        <result column="priority" jdbcType="INTEGER" property="priority"/>
        <result column="created_time" jdbcType="TIMESTAMP" property="createdTime"/>
        <result column="modified_time" jdbcType="TIMESTAMP" property="modifiedTime"/>
        <result column="created_uid" jdbcType="INTEGER" property="createdUid"/>
        <result column="modified_uid" jdbcType="INTEGER" property="modifiedUid"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, d_name, type_id, priority, created_time, modified_time, created_uid, modified_uid
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from dict
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--@mbg.generated-->
        delete from dict
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.zm.inference.domain.Dict"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into dict (d_name, type_id, priority,
        created_time, modified_time, created_uid,
        modified_uid)
        values (#{dName,jdbcType=VARCHAR}, #{typeId,jdbcType=INTEGER}, #{priority,jdbcType=INTEGER},
        #{createdTime,jdbcType=TIMESTAMP}, #{modifiedTime,jdbcType=TIMESTAMP}, #{createdUid,jdbcType=INTEGER},
        #{modifiedUid,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.zm.inference.domain.Dict"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into dict
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="dName != null">
                d_name,
            </if>
            <if test="typeId != null">
                type_id,
            </if>
            <if test="priority != null">
                priority,
            </if>
            <if test="createdTime != null">
                created_time,
            </if>
            <if test="modifiedTime != null">
                modified_time,
            </if>
            <if test="createdUid != null">
                created_uid,
            </if>
            <if test="modifiedUid != null">
                modified_uid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="dName != null">
                #{dName,jdbcType=VARCHAR},
            </if>
            <if test="typeId != null">
                #{typeId,jdbcType=INTEGER},
            </if>
            <if test="priority != null">
                #{priority,jdbcType=INTEGER},
            </if>
            <if test="createdTime != null">
                #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifiedTime != null">
                #{modifiedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createdUid != null">
                #{createdUid,jdbcType=INTEGER},
            </if>
            <if test="modifiedUid != null">
                #{modifiedUid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.zm.inference.domain.Dict">
        <!--@mbg.generated-->
        update dict
        <set>
            <if test="dName != null">
                d_name = #{dName,jdbcType=VARCHAR},
            </if>
            <if test="typeId != null">
                type_id = #{typeId,jdbcType=INTEGER},
            </if>
            <if test="priority != null">
                priority = #{priority,jdbcType=INTEGER},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifiedTime != null">
                modified_time = #{modifiedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createdUid != null">
                created_uid = #{createdUid,jdbcType=INTEGER},
            </if>
            <if test="modifiedUid != null">
                modified_uid = #{modifiedUid,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.zm.inference.domain.Dict">
        <!--@mbg.generated-->
        update dict
        set d_name = #{dName,jdbcType=VARCHAR},
        type_id = #{typeId,jdbcType=INTEGER},
        priority = #{priority,jdbcType=INTEGER},
        created_time = #{createdTime,jdbcType=TIMESTAMP},
        modified_time = #{modifiedTime,jdbcType=TIMESTAMP},
        created_uid = #{createdUid,jdbcType=INTEGER},
        modified_uid = #{modifiedUid,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectByIds" resultMap="BaseResultMap">
        select *
        from dict
        where id in
        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id,jdbcType=VARCHAR}
        </foreach>
    </select>

    <!--auto generated by MybatisCodeHelper on 2020-05-16-->
    <select id="selectIdAndDNameByTypeId" resultMap="selectIdAndDNameByTypeIdResult">
        select id, d_name
        from dict
        where type_id=#{typeId,jdbcType=INTEGER}
    </select>

</mapper>